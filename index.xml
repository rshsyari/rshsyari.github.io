<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rshsyari</title>
    <link>https://rshsyari.github.io/</link>
    <description>Recent content on rshsyari</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 22 Mar 2025 21:13:52 +0700</lastBuildDate>
    <atom:link href="https://rshsyari.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bash</title>
      <link>https://rshsyari.github.io/posts/bash/</link>
      <pubDate>Sat, 22 Mar 2025 21:13:52 +0700</pubDate>
      <guid>https://rshsyari.github.io/posts/bash/</guid>
      <description>&lt;p&gt;For some small tasks, sometimes Bash script (shell script in general) is better than a full-blown program using programming languages. Here are some personal tips to write a Bash script:&lt;/p&gt;&#xA;&lt;h2 id=&#34;exit-on-fail&#34;&gt;Exit on fail&lt;/h2&gt;&#xA;&lt;p&gt;Use &lt;code&gt;set -o errexit&lt;/code&gt; to make the script exit when it fails. If some commands are allowed to fail, &lt;code&gt;command1 || echo &amp;quot;command1 is failed, but continuing&amp;quot;&lt;/code&gt; can be used.&lt;/p&gt;&#xA;&lt;h2 id=&#34;prevent-access-to-undeclared-variables&#34;&gt;Prevent access to undeclared variables&lt;/h2&gt;&#xA;&lt;p&gt;Use &lt;code&gt;set -o nounset&lt;/code&gt; to exit when the script tries to use undeclared variables. Imagine running this command when undeclared variables is allowed:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
